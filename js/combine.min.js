function checkbox() {
    jQuery("input[type=checkbox]").each(function() {
        if (jQuery(this).is(":checked")) {
            var $id = jQuery(this).attr("id");
            checkbox_set($id);
        }
        jQuery(this).is(":disabled") && jQuery(this).closest(".checkbox").find("label").addClass("disabled");
    }), jQuery(".checkbox label").on("click", function(e) {
        var $id = jQuery(this).attr("for");
        checkbox_change($id);
    }), jQuery(".checkbox label > img").on("click", function() {
        var $label = jQuery(this).closest("label"), $id = $label.attr("for");
        $label.trigger("click"), checkbox_change($id);
    }), jQuery('input[type="checkbox"]').keypress(function(e) {
        if (0 == e.keyCode || 32 == e.keyCode) {
            var $id = jQuery(this).attr("id");
            checkbox_change($id);
        }
    }), jQuery(".checkbox label a").on("click", function(e) {
        e.stopPropagation();
    });
}

function checkbox_change($id) {
    "undefined" == typeof $id && ($id = ""), $id = escape_string($id);
    var $input = jQuery('input[id="' + $id + '"]'), $label = jQuery('label[for="' + $id + '"]');
    $input.is(":disabled") ? jQuery(this).addClass("disabled") : $input.prop("checked") ? $label.removeClass("checked") : $label.addClass("checked");
}

function checkbox_set($id) {
    var $input = jQuery('input[id="' + $id + '"]'), $label = jQuery('label[for="' + $id + '"]');
    $label.addClass("checked"), $input.prop("checked", !0);
}

function checkbox_unset($id) {
    var $input = jQuery('input[id="' + $id + '"]'), $label = jQuery('label[for="' + $id + '"]');
    $label.removeClass("checked"), $input.prop("checked", !1);
}

function radio(id) {
    jQuery("input[type=radio]").each(function() {
        if (jQuery(this).is(":checked")) {
            var $id = jQuery(this).attr("id");
            radio_set($id);
        }
        jQuery(this).is(":disabled") && jQuery(this).closest(".radio").find("label").addClass("disabled");
    }), jQuery(".radio label").on("click", function() {
        var $id = jQuery(this).attr("for");
        radio_change($id);
    }), jQuery(".radio label > img").on("click", function() {
        var $label = jQuery(this).closest("label"), $id = $label.attr("for");
        $label.trigger("click"), radio_change($id);
    }), jQuery('input[type="radio"]').keypress(function(e) {
        if (0 == e.keyCode || 32 == e.keyCode) {
            var $id = jQuery(this).attr("id");
            radio_change($id);
        }
    }), jQuery(".radio label a").on("click", function(e) {
        e.stopPropagation();
    });
}

function radio_change($id) {
    "undefined" == typeof $id && ($id = ""), $id = escape_string($id);
    var $input = jQuery('input[id="' + $id + '"]'), $input_group = $input.attr("name"), $label = jQuery('label[for="' + $id + '"]');
    $input.is(":disabled") ? jQuery(this).addClass("disabled") : (jQuery('.radio[data-group="' + $input_group + '"] label').removeClass("checked"), 
    $label.addClass("checked"));
}

function radio_set($id) {
    var $input = jQuery('input[id="' + $id + '"]'), $input_group = $input.attr("name"), $label = jQuery('label[for="' + $id + '"]');
    jQuery('.radio[data-group="' + $input_group + '"] label').removeClass("checked"), 
    $label.addClass("checked"), $input.prop("checked", !0);
}

function radio_unset($id) {
    var $input = jQuery('input[id="' + $id + '"]'), $input_group = $input.attr("name"), $group = jQuery('.radio[data-group="' + $input_group + '"]');
    $group.find("label").removeClass("checked"), $group.find('input[type="radio"]').prop("checked", !1);
}

function radio_group_unset($input_group) {
    var $group = jQuery('.radio[data-group="' + $input_group + '"]');
    $group.find("label").removeClass("checked"), $group.find('input[type="radio"]').prop("checked", !1);
}

function select($id) {
    "undefined" == typeof $id && ($id = ".select"), jQuery("select").each(function() {
        var $this = jQuery(this), $style = $this.attr("data-style"), $select = $this.closest($id).outerWidth() + 50;
        "false" !== $style && 0 == $this.parents($id).length && $this.wrap('<div class="select field-row"></div>'), 
        "false" !== $style && $this.css({
            minWidth: $select
        }), jQuery(window).resize(function() {
            $select = $this.closest($id).outerWidth() + 50, "false" !== $style && $this.css({
                minWidth: $select
            });
        });
    });
}

function tooltip() {
    function show_tip($this) {
        $this = jQuery($this);
        var $style, $top, $left, $bottom, $tip = $this.closest(".tooltip").find(".tip"), $position = $tip.attr("data-tip-position"), $arrow = $tip.attr("data-tip-arrow"), $el_width = $this.outerWidth(), $el_height = $this.outerHeight(), $tip_width = $tip.outerWidth(), $tip_height = $tip.outerHeight(), $arrow_size = 10, $arrow_move = 2 * $arrow_size, $right = "";
        if (("" == $position || void 0 == $position) && ($position = "bottom", $tip.attr("data-tip-position", $position)), 
        ("" == $arrow || void 0 == $arrow) && ($arrow = "center", $tip.attr("data-tip-arrow", $arrow)), 
        ("" == $arrow_size || void 0 == $arrow_size) && ($arrow_size = 10), "top" == $position && ($bottom = $el_height + $arrow_move, 
        $top = "auto"), "bottom" == $position && ($top = $el_height + $arrow_move, $bottom = "auto"), 
        "right" == $position && ($right = -($tip_width + $arrow_move), $left = "auto"), 
        "left" == $position && ($left = -($tip_width + $arrow_move), $right = "auto"), "top" == $position || "bottom" == $position) switch ($arrow) {
          case "left":
            $left = $el_width / 2 - $arrow_size - $arrow_move, $right = "auto";
            break;

          case "center":
            $left = $el_width / 2 - $tip_width / 2, $right = "auto";
            break;

          case "right":
            $left = "auto", $right = $el_width / 2 - $arrow_size - $arrow_move;
        }
        if ("left" == $position || "right" == $position) switch ($arrow) {
          case "top":
            $top = $el_height / 2 - $arrow_size - $arrow_move, $bottom = "auto";
            break;

          case "center":
            $top = $el_height / 2 - $tip_height / 2, $bottom = "auto";
            break;

          case "bottom":
            $top = "auto", $bottom = $el_height / 2 - $arrow_size - $arrow_move;
        }
        $style = {
            width: $tip_width,
            top: $top,
            bottom: $bottom,
            left: $left,
            right: $right
        }, jQuery($tip).css($style).removeClass("inactive");
    }
    function hide_tip($this) {
        $this = jQuery($this);
        var $tip = $this.closest(".tooltip").find(".tip"), $dont_hide = $tip.attr("data-hide");
        ("" == $dont_hide || void 0 == $dont_hide || "true" == $dont_hide) && $tip.addClass("inactive");
    }
    function hide_all_tips() {
        jQuery(".tip").addClass("inactive");
    }
    var $trigger = jQuery(".tooltip_trigger");
    Modernizr.touch ? $trigger.on("click", function(e) {
        e.preventDefault();
        var $this = jQuery(this), $tip = $this.closest(".tooltip").find(".tip");
        $tip.hasClass("inactive") ? (hide_all_tips(), show_tip(this)) : hide_tip(this);
    }) : $trigger.on({
        mouseover: function(e) {
            e.preventDefault(), show_tip(this);
        },
        mouseout: function(e) {
            e.preventDefault(), hide_tip(this);
        }
    });
}

function upload() {
    jQuery(".upload input[type=text]").click(function() {
        jQuery(this).closest(".upload").find("input[type=file]").trigger("click");
    }), jQuery(".upload .btn").click(function(e) {
        e.preventDefault(), jQuery(this).closest(".upload").find("input[type=file]").trigger("click");
    }), jQuery(".upload input[type=file]").change(function() {
        jQuery(this).closest(".upload").find("input[type=text]").val(jQuery(this).val());
    });
}

function tabs($tabs_id) {
    function tabs_change($id, $tabs_id) {
        var $this = jQuery($id), $active = $this.attr("data-tab"), $tabs = $this.closest($tabs_id), $t_head = $tabs.find(".t_head li"), $t_head_id = $tabs.find('.t_head li[data-tab="' + $active + '"]'), $t_content = $tabs.find(".t_content"), $t_content_id = $tabs.find('.t_content[data-content="' + $active + '"]');
        $t_head.removeClass("active"), $t_content.removeClass("active"), $t_head_id.addClass("active"), 
        $t_content_id.addClass("active");
    }
    "undefined" == typeof $tabs_id && ($tabs_id = ".tabs"), jQuery($tabs_id).each(function() {
        var $this = jQuery(this), $active = $this.attr("data-active");
        ("" == $active || void 0 === $active) && ($active = $this.find(".t_head li:first-child").attr("data-tab")), 
        tabs_set($active, this);
    }), jQuery(".t_head li").click(function() {
        tabs_change(this, $tabs_id);
    });
}

function tabs_set($id, $tabs) {
    "undefined" == typeof $id && ($id = ""), "undefined" == typeof $tabs && ($tabs = ".tabs"), 
    $tabs = jQuery($tabs), $tabs.find(".t_head li").removeClass("active"), $tabs.find(".t_content").removeClass("active"), 
    $tabs.find('.t_head li[data-tab="' + $id + '"]').addClass("active"), $tabs.find('.t_content[data-content="' + $id + '"]').addClass("active");
}

function accordion($accordion_id) {
    function accordion_change($id, $accordion_id) {
        var $this = jQuery($id), $active = $this.attr("data-acc"), $accordion = $this.closest($accordion_id), $a_head = $accordion.find(".a_head"), $a_head_id = $accordion.find('.a_head[data-acc="' + $active + '"]'), $a_content = $accordion.find(".a_content"), $a_content_id = $accordion.find('.a_content[data-content="' + $active + '"]'), $auto_close = $accordion.attr("data-autoclose");
        $auto_close !== !1 ? $a_head_id.hasClass("active") ? ($a_head_id.removeClass("active"), 
        $a_content_id.removeClass("active")) : ($a_head.removeClass("active"), $a_content.removeClass("active"), 
        $a_head_id.addClass("active"), $a_content_id.addClass("active")) : ($a_head_id.toggleClass("active"), 
        $a_content_id.toggleClass("active"));
    }
    "undefined" == typeof $accordion_id && ($accordion_id = ".accordion"), jQuery($accordion_id).each(function() {
        var $id = jQuery(this).attr("data-active");
        accordion_open($id, this);
    }), jQuery(".a_head").click(function() {
        accordion_change(this, $accordion_id);
    });
}

function accordion_open($id, $accordion) {
    "undefined" == typeof $id && ($id = ""), "undefined" == typeof $accordion && ($accordion = ".accordion"), 
    $accordion = jQuery($accordion), $accordion.find('.a_head[data-acc="' + $id + '"]').addClass("active"), 
    $accordion.find('.a_content[data-content="' + $id + '"]').addClass("active");
}

function accordion_close($id, $accordion) {
    "undefined" == typeof $id && ($id = ""), "undefined" == typeof $accordion && ($accordion = ".accordion"), 
    $accordion = jQuery($accordion), $accordion.find('.a_head[data-acc="' + $id + '"]').removeClass("active"), 
    $accordion.find('.a_content[data-content="' + $id + '"]').removeClass("active");
}

function modal() {
    var $modal_id = ".modal";
    jQuery($modal_id);
    jQuery(".open_modal, .modal_open").on("click", function(e) {
        e.preventDefault();
        var $id = jQuery(this).attr("data-modal");
        modal_open($id);
    }), jQuery(document).keyup(function(e) {
        27 == e.keyCode && modal_close();
    }), jQuery(".m_overlay").on("click", function() {
        var $modal = jQuery(this).closest(".modal"), $id = $modal.attr("data-modal"), $action = $modal.attr("data-close-on-overlay");
        "false" !== $action && modal_close($id);
    }), jQuery(".close_modal, .modal_close").on("click", function(e) {
        e.preventDefault();
        var $modal = jQuery(this).closest(".modal"), $id = $modal.attr("data-modal"), $action = $modal.attr("data-close-on-btn");
        "false" !== $action && modal_close($id);
    });
}

function modal_open($id) {
    var $modal = jQuery('.modal[data-modal="' + $id + '"]');
    modal_calculate_center($id), $modal.addClass("active"), jQuery("html").addClass("modal_active"), 
    jQuery(window).resize(function() {
        modal_calculate_center($id);
    });
}

function modal_close($id) {
    var $modal;
    $modal = "undefined" == typeof $id ? jQuery(".modal") : jQuery('.modal[data-modal="' + $id + '"]'), 
    $modal.removeClass("active"), jQuery("html").removeClass("modal_active");
}

function modal_calculate_center($id) {
    var $modal;
    if ($modal = "undefined" == typeof $id ? jQuery(".modal") : jQuery('.modal[data-modal="' + $id + '"]'), 
    "scale" == $modal.attr("data-slide")) {
        var $move, $window_height = jQuery(window).height(), $modal_height = $modal.find(".m_content").outerHeight();
        $move = $modal_height >= $window_height ? 0 : ($window_height - $modal_height) / 2, 
        $modal.find(".m_content_wrap").css("top", $move);
    }
}

function sticky($id) {
    if ($id = jQuery($id), $id.length) {
        var $item = $id.offset().top;
        jQuery(window).scroll(function() {
            jQuery(this).scrollTop() >= $item ? $id.addClass("sticky") : $id.removeClass("sticky");
        });
    }
}

function sticky_footer($container, $id, $offset) {
    "undefined" == typeof $offset && ($offset = 0), "undefined" == typeof $id && ($id = "#footer");
    var $bottom = jQuery($container).position().top + jQuery($container).outerHeight(!0) + $offset, $page_height = jQuery(window).height();
    $page_height >= $bottom ? jQuery($id).addClass("sticky") : jQuery($id).removeClass("sticky");
}

function scrollTo_click($id, $offset) {
    "undefined" == typeof $offset && ($offset = 0), jQuery($id).click(function(e) {
        var $id_scroll = jQuery(this).attr("data-scroll-to");
        return "undefined" != typeof $id_scroll && $id_scroll.length ? (e.preventDefault(), 
        jQuery("html, body").animate({
            scrollTop: jQuery($id_scroll).offset().top - $offset
        }, 500), !1) : void 0;
    });
}

function scrollTo($id, $offset) {
    return "undefined" == typeof $offset && ($offset = 0), jQuery("html, body").animate({
        scrollTop: jQuery($id).offset().top - $offset
    }, 500), !1;
}

function escape_string($str) {
    return $str.replace(/([;&,\.\+\*\~':"\!\^#$%@\[\]\(\)=>\|])/g, "\\$1");
}

function disable() {
    jQuery("a.disabled").on("click", function(e) {
        e.preventDefault(), jQuery(this).off();
    });
}

function setCookie($key, $value, $time) {
    var $expires = new Date();
    $expires.setTime($expires.getTime() + $time), document.cookie = $key + "=" + $value + ";expires=" + $expires.toUTCString();
}

function getCookie($key) {
    var $keyValue = document.cookie.match("(^|;) ?" + $key + "=([^;]*)(;|$)");
    return $keyValue ? $keyValue[2] : null;
}

!function(t) {
    "use strict";
    function e(t, e, r) {
        return t.addEventListener ? t.addEventListener(e, r, !1) : t.attachEvent ? t.attachEvent("on" + e, r) : void 0;
    }
    function r(t, e) {
        var r, n;
        for (r = 0, n = t.length; n > r; r++) if (t[r] === e) return !0;
        return !1;
    }
    function n(t, e) {
        var r;
        t.createTextRange ? (r = t.createTextRange(), r.move("character", e), r.select()) : t.selectionStart && (t.focus(), 
        t.setSelectionRange(e, e));
    }
    function a(t, e) {
        try {
            return t.type = e, !0;
        } catch (r) {
            return !1;
        }
    }
    t.Placeholders = {
        Utils: {
            addEventListener: e,
            inArray: r,
            moveCaret: n,
            changeType: a
        }
    };
}(this), function(t) {
    "use strict";
    function e() {}
    function r() {
        try {
            return document.activeElement;
        } catch (t) {}
    }
    function n(t, e) {
        var r, n, a = !!e && t.value !== e, u = t.value === t.getAttribute(V);
        return (a || u) && "true" === t.getAttribute(D) ? (t.removeAttribute(D), t.value = t.value.replace(t.getAttribute(V), ""), 
        t.className = t.className.replace(R, ""), n = t.getAttribute(F), parseInt(n, 10) >= 0 && (t.setAttribute("maxLength", n), 
        t.removeAttribute(F)), r = t.getAttribute(P), r && (t.type = r), !0) : !1;
    }
    function a(t) {
        var e, r, n = t.getAttribute(V);
        return "" === t.value && n ? (t.setAttribute(D, "true"), t.value = n, t.className += " " + I, 
        r = t.getAttribute(F), r || (t.setAttribute(F, t.maxLength), t.removeAttribute("maxLength")), 
        e = t.getAttribute(P), e ? t.type = "text" : "password" === t.type && M.changeType(t, "text") && t.setAttribute(P, "password"), 
        !0) : !1;
    }
    function u(t, e) {
        var r, n, a, u, i, l, o;
        if (t && t.getAttribute(V)) e(t); else for (a = t ? t.getElementsByTagName("input") : b, 
        u = t ? t.getElementsByTagName("textarea") : f, r = a ? a.length : 0, n = u ? u.length : 0, 
        o = 0, l = r + n; l > o; o++) i = r > o ? a[o] : u[o - r], e(i);
    }
    function i(t) {
        u(t, n);
    }
    function l(t) {
        u(t, a);
    }
    function o(t) {
        return function() {
            m && t.value === t.getAttribute(V) && "true" === t.getAttribute(D) ? M.moveCaret(t, 0) : n(t);
        };
    }
    function c(t) {
        return function() {
            a(t);
        };
    }
    function s(t) {
        return function(e) {
            return A = t.value, "true" === t.getAttribute(D) && A === t.getAttribute(V) && M.inArray(C, e.keyCode) ? (e.preventDefault && e.preventDefault(), 
            !1) : void 0;
        };
    }
    function d(t) {
        return function() {
            n(t, A), "" === t.value && (t.blur(), M.moveCaret(t, 0));
        };
    }
    function g(t) {
        return function() {
            t === r() && t.value === t.getAttribute(V) && "true" === t.getAttribute(D) && M.moveCaret(t, 0);
        };
    }
    function v(t) {
        return function() {
            i(t);
        };
    }
    function p(t) {
        t.form && (T = t.form, "string" == typeof T && (T = document.getElementById(T)), 
        T.getAttribute(U) || (M.addEventListener(T, "submit", v(T)), T.setAttribute(U, "true"))), 
        M.addEventListener(t, "focus", o(t)), M.addEventListener(t, "blur", c(t)), m && (M.addEventListener(t, "keydown", s(t)), 
        M.addEventListener(t, "keyup", d(t)), M.addEventListener(t, "click", g(t))), t.setAttribute(j, "true"), 
        t.setAttribute(V, x), (m || t !== r()) && a(t);
    }
    var b, f, m, h, A, y, E, x, L, T, N, S, w, B = [ "text", "search", "url", "tel", "email", "password", "number", "textarea" ], C = [ 27, 33, 34, 35, 36, 37, 38, 39, 40, 8, 46 ], k = "#ccc", I = "placeholdersjs", R = RegExp("(?:^|\\s)" + I + "(?!\\S)"), V = "data-placeholder-value", D = "data-placeholder-active", P = "data-placeholder-type", U = "data-placeholder-submit", j = "data-placeholder-bound", q = "data-placeholder-focus", z = "data-placeholder-live", F = "data-placeholder-maxlength", G = document.createElement("input"), H = document.getElementsByTagName("head")[0], J = document.documentElement, K = t.Placeholders, M = K.Utils;
    if (K.nativeSupport = void 0 !== G.placeholder, !K.nativeSupport) {
        for (b = document.getElementsByTagName("input"), f = document.getElementsByTagName("textarea"), 
        m = "false" === J.getAttribute(q), h = "false" !== J.getAttribute(z), y = document.createElement("style"), 
        y.type = "text/css", E = document.createTextNode("." + I + " { color:" + k + "; }"), 
        y.styleSheet ? y.styleSheet.cssText = E.nodeValue : y.appendChild(E), H.insertBefore(y, H.firstChild), 
        w = 0, S = b.length + f.length; S > w; w++) N = b.length > w ? b[w] : f[w - b.length], 
        x = N.attributes.placeholder, x && (x = x.nodeValue, x && M.inArray(B, N.type) && p(N));
        L = setInterval(function() {
            for (w = 0, S = b.length + f.length; S > w; w++) N = b.length > w ? b[w] : f[w - b.length], 
            x = N.attributes.placeholder, x ? (x = x.nodeValue, x && M.inArray(B, N.type) && (N.getAttribute(j) || p(N), 
            (x !== N.getAttribute(V) || "password" === N.type && !N.getAttribute(P)) && ("password" === N.type && !N.getAttribute(P) && M.changeType(N, "text") && N.setAttribute(P, "password"), 
            N.value === N.getAttribute(V) && (N.value = x), N.setAttribute(V, x)))) : N.getAttribute(D) && (n(N), 
            N.removeAttribute(V));
            h || clearInterval(L);
        }, 100);
    }
    M.addEventListener(t, "beforeunload", function() {
        K.disable();
    }), K.disable = K.nativeSupport ? e : i, K.enable = K.nativeSupport ? e : l;
}(this), function(b) {
    b.fn.matchHeight = function(a) {
        if ("remove" === a) {
            var d = this;
            return this.css("height", ""), b.each(b.fn.matchHeight._groups, function(b, a) {
                a.elements = a.elements.not(d);
            }), this;
        }
        return 1 >= this.length ? this : (a = "undefined" != typeof a ? a : !0, b.fn.matchHeight._groups.push({
            elements: this,
            byRow: a
        }), b.fn.matchHeight._apply(this, a), this);
    }, b.fn.matchHeight._apply = function(a, d) {
        var c = b(a), f = [ c ], e = b(window).scrollTop(), h = b("html").outerHeight(!0);
        return d && (c.each(function() {
            var a = b(this), c = "inline-block" === a.css("display") ? "inline-block" : "block";
            a.css({
                display: c,
                "padding-top": "0",
                "padding-bottom": "0",
                "border-top-width": "0",
                "border-bottom-width": "0",
                height: "100px"
            });
        }), f = m(c), c.css({
            display: "",
            "padding-top": "",
            "padding-bottom": "",
            "border-top-width": "",
            "border-bottom-width": "",
            height: ""
        })), b.each(f, function(a, c) {
            var d = b(c), f = 0, e = d.parents().add(d).filter(":hidden");
            e.css({
                display: "block"
            }), d.each(function() {
                var a = b(this), c = "inline-block" === a.css("display") ? "inline-block" : "block";
                a.css({
                    display: c,
                    height: ""
                }), a.outerHeight(!1) > f && (f = a.outerHeight(!1)), a.css({
                    display: ""
                });
            }), e.css({
                display: ""
            }), d.each(function() {
                var a = b(this), c = 0;
                "border-box" !== a.css("box-sizing") && (c += g(a.css("border-top-width")) + g(a.css("border-bottom-width")), 
                c += g(a.css("padding-top")) + g(a.css("padding-bottom"))), a.css("height", f - c);
            });
        }), b.fn.matchHeight._maintainScroll && b(window).scrollTop(e / h * b("html").outerHeight(!0)), 
        this;
    }, b.fn.matchHeight._applyDataApi = function() {
        var a = {};
        b("[data-match-height], [data-mh]").each(function() {
            var d = b(this), c = d.attr("data-match-height") || d.attr("data-mh");
            a[c] = c in a ? a[c].add(d) : d;
        }), b.each(a, function() {
            this.matchHeight(!0);
        });
    }, b.fn.matchHeight._groups = [], b.fn.matchHeight._throttle = 80, b.fn.matchHeight._maintainScroll = !1;
    var l = -1, k = -1;
    b.fn.matchHeight._update = function(a) {
        if (a && "resize" === a.type) {
            if (a = b(window).width(), a === l) return;
            l = a;
        }
        -1 === k && (k = setTimeout(function() {
            b.each(b.fn.matchHeight._groups, function() {
                b.fn.matchHeight._apply(this.elements, this.byRow);
            }), k = -1;
        }, b.fn.matchHeight._throttle));
    }, b(b.fn.matchHeight._applyDataApi), b(window).bind("load resize orientationchange", b.fn.matchHeight._update);
    var m = function(a) {
        var d = null, c = [];
        return b(a).each(function() {
            var a = b(this), e = a.offset().top - g(a.css("margin-top")), h = 0 < c.length ? c[c.length - 1] : null;
            null === h ? c.push(a) : 1 >= Math.floor(Math.abs(d - e)) ? c[c.length - 1] = h.add(a) : c.push(a), 
            d = e;
        }), c;
    }, g = function(a) {
        return parseFloat(a) || 0;
    };
}(jQuery), jQuery(function() {
    accordion(), tabs(), upload(), checkbox(), radio(), select(), modal(), tooltip(), 
    disable(), scrollTo_click(".scroll_to", 100);
}), jQuery(window).resize(function() {}), jQuery(function() {}), jQuery(window).resize(function() {});
//# sourceMappingURL=/sourceMap.map